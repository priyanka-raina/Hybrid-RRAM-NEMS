//
//--------------------------------------------------------------------------------
//          THIS FILE WAS AUTOMATICALLY GENERATED BY THE GENESIS2 ENGINE        
//  FOR MORE INFORMATION: OFER SHACHAM (CHIP GENESIS INC / STANFORD VLSI GROUP)
//    !! THIS VERSION OF GENESIS2 IS NOT FOR ANY COMMERCIAL USE !!
//     FOR COMMERCIAL LICENSE CONTACT SHACHAM@ALUMNI.STANFORD.EDU
//--------------------------------------------------------------------------------
//
//  
//	-----------------------------------------------
//	|            Genesis Release Info             |
//	|  $Change: 11879 $ --- $Date: 2013/06/11 $   |
//	-----------------------------------------------
//	
//
//  Source file: /home/akashl/CGRAGenerator/hardware/generator_z/sb/sb.vp
//  Source template: sb
//
// --------------- Begin Pre-Generation Parameters Status Report ---------------
//
//	From 'generate' statement (priority=5):
// Parameter width 	= 16
// Parameter pe_output_count 	= 1
// Parameter is_bidi 	= 0
// Parameter sides 	= 4
// Parameter sb_fs 	= 10000#10000#10000
// Parameter feedthrough_outputs 	= undef
// Parameter feedthrough_outputs 	= 
// Parameter num_tracks 	= 9
// Parameter registered_outputs 	= undef
// Parameter registered_outputs 	= 
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Command Line input (priority=4):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From XML input (priority=3):
//
//		---- ---- ---- ---- ---- ---- ---- ---- ---- ---- ----
//
//	From Config File input (priority=2):
//
// ---------------- End Pre-Generation Pramameters Status Report ----------------

// width (_GENESIS2_INHERITANCE_PRIORITY_) = 16
//
// num_tracks (_GENESIS2_INHERITANCE_PRIORITY_) = 9
//
// sides (_GENESIS2_INHERITANCE_PRIORITY_) = 4
//
// feedthrough_outputs (_GENESIS2_INHERITANCE_PRIORITY_) = undef
//
// registered_outputs (_GENESIS2_INHERITANCE_PRIORITY_) = undef
//
// pe_output_count (_GENESIS2_INHERITANCE_PRIORITY_) = 1
//
// is_bidi (_GENESIS2_INHERITANCE_PRIORITY_) = 0
//
// sb_fs (_GENESIS2_INHERITANCE_PRIORITY_) = 10000#10000#10000
//



module sb_unq1 (
clk, clk_en, reset, 
pe_output_0,
out_0_0,
in_0_0,
out_0_1,
in_0_1,
out_0_2,
in_0_2,
out_0_3,
in_0_3,
out_0_4,
in_0_4,
out_0_5,
in_0_5,
out_0_6,
in_0_6,
out_0_7,
in_0_7,
out_0_8,
in_0_8,
out_1_0,
in_1_0,
out_1_1,
in_1_1,
out_1_2,
in_1_2,
out_1_3,
in_1_3,
out_1_4,
in_1_4,
out_1_5,
in_1_5,
out_1_6,
in_1_6,
out_1_7,
in_1_7,
out_1_8,
in_1_8,
out_2_0,
in_2_0,
out_2_1,
in_2_1,
out_2_2,
in_2_2,
out_2_3,
in_2_3,
out_2_4,
in_2_4,
out_2_5,
in_2_5,
out_2_6,
in_2_6,
out_2_7,
in_2_7,
out_2_8,
in_2_8,
out_3_0,
in_3_0,
out_3_1,
in_3_1,
out_3_2,
in_3_2,
out_3_3,
in_3_3,
out_3_4,
in_3_4,
out_3_5,
in_3_5,
out_3_6,
in_3_6,
out_3_7,
in_3_7,
out_3_8,
in_3_8,
config_addr,
config_data,
config_en,
read_data
);

  input  clk;
  input  clk_en;
  input  reset;
  input  config_en;
  input [31:0] config_data;

  // FIXME
  // Bits [31:24] are for switch box, [23:0] for connection box.
  // So bits  [23:0] go unused in this module.  Until this is fixed,
  // we have to let the linter know (verilator directives below) or it complains:
  // %Warning-UNUSED: .../sb_unq1.v:115: Bits of signal are not used: config_addr[23:0]
  /* verilator lint_off UNUSED */
  input [31:0] config_addr;
  /* verilator lint_on UNUSED */

  input [15:0] pe_output_0;
  
  output [15:0] out_0_0;
  input [15:0] in_0_0;
  output [15:0] out_0_1;
  input [15:0] in_0_1;
  output [15:0] out_0_2;
  input [15:0] in_0_2;
  output [15:0] out_0_3;
  input [15:0] in_0_3;
  output [15:0] out_0_4;
  input [15:0] in_0_4;
  output [15:0] out_0_5;
  input [15:0] in_0_5;
  output [15:0] out_0_6;
  input [15:0] in_0_6;
  output [15:0] out_0_7;
  input [15:0] in_0_7;
  output [15:0] out_0_8;
  input [15:0] in_0_8;
  output [15:0] out_1_0;
  input [15:0] in_1_0;
  output [15:0] out_1_1;
  input [15:0] in_1_1;
  output [15:0] out_1_2;
  input [15:0] in_1_2;
  output [15:0] out_1_3;
  input [15:0] in_1_3;
  output [15:0] out_1_4;
  input [15:0] in_1_4;
  output [15:0] out_1_5;
  input [15:0] in_1_5;
  output [15:0] out_1_6;
  input [15:0] in_1_6;
  output [15:0] out_1_7;
  input [15:0] in_1_7;
  output [15:0] out_1_8;
  input [15:0] in_1_8;
  output [15:0] out_2_0;
  input [15:0] in_2_0;
  output [15:0] out_2_1;
  input [15:0] in_2_1;
  output [15:0] out_2_2;
  input [15:0] in_2_2;
  output [15:0] out_2_3;
  input [15:0] in_2_3;
  output [15:0] out_2_4;
  input [15:0] in_2_4;
  output [15:0] out_2_5;
  input [15:0] in_2_5;
  output [15:0] out_2_6;
  input [15:0] in_2_6;
  output [15:0] out_2_7;
  input [15:0] in_2_7;
  output [15:0] out_2_8;
  input [15:0] in_2_8;
  output [15:0] out_3_0;
  input [15:0] in_3_0;
  output [15:0] out_3_1;
  input [15:0] in_3_1;
  output [15:0] out_3_2;
  input [15:0] in_3_2;
  output [15:0] out_3_3;
  input [15:0] in_3_3;
  output [15:0] out_3_4;
  input [15:0] in_3_4;
  output [15:0] out_3_5;
  input [15:0] in_3_5;
  output [15:0] out_3_6;
  input [15:0] in_3_6;
  output [15:0] out_3_7;
  input [15:0] in_3_7;
  output [15:0] out_3_8;
  input [15:0] in_3_8;
  output reg [31:0] read_data;




  reg [127:0] config_sb;
  
  always @(posedge clk or posedge reset) begin
    if (reset==1'b1) begin

      // SR/NB 12/2017
      // Initialize registers to "unregistered" (leading zeroes);
      // initialize routes to pe_out_res (ones) (in the case of PEs)
      //
      // SR 5/2018 NOTE/BEWARE/FIXME! sb module also used in memtiles, which
      // have no pe_res_out, so default behavior (below) may be unexpected!!!
      // (Memtile defaults are rdata and/or almost_empty, maybe.)
      //
      // SR 5/2018 Hacky 'fix' for above problem:
      // For mem-control-bit switchboxes, use all zeroes as the default.
      // This does not really fix the problem maybe, but it propagates
      // the previously-working solution ish.

      config_sb <= {{56{1'b0}},{72{1'b0}}}; // for mem-control-bit wiring

    end else begin
      if (config_en==1'b1) begin
         case (config_addr[31:24])
           8'd0: config_sb[31:0] <= config_data;
           8'd1: config_sb[63:32] <= config_data;
           8'd2: config_sb[95:64] <= config_data;
           8'd3: config_sb[127:96] <= config_data;
           default: ;
         endcase
      end
    end
  end


  reg [63:0] config_ungate;
  
  always @(posedge clk or posedge reset) begin
    if (reset==1'b1) begin

      config_ungate <= 64'h0;

    end else begin
      if (config_en==1'b1) begin
         case (config_addr[31:24])
           8'd4: config_ungate[31:0] <= config_data;
           8'd5: config_ungate[63:32] <= config_data;
           default: ;
         endcase
      end
    end
  end


  reg [15:0] out_0_0_i;
  always @(*) begin
    case (config_sb[1:0])
        2'd0: out_0_0_i = in_1_0;
        2'd1: out_0_0_i = in_2_0;
        2'd2: out_0_0_i = in_3_0;
        2'd3: out_0_0_i = pe_output_0;
        default: out_0_0_i = 0;
    endcase
  end
  reg [15:0] out_0_0_id1;
  wire out_0_0_le;
  assign out_0_0_le = clk_en | (config_ungate[0]); 
  always @(posedge clk) begin
    if (out_0_0_le)
      out_0_0_id1 <= out_0_0_i;
  end
  assign out_0_0 = config_sb[72]?out_0_0_id1:out_0_0_i; 
  reg [15:0] out_0_1_i;
  always @(*) begin
    case (config_sb[3:2])
        2'd0: out_0_1_i = in_1_1;
        2'd1: out_0_1_i = in_2_1;
        2'd2: out_0_1_i = in_3_1;
        2'd3: out_0_1_i = pe_output_0;
        default: out_0_1_i = 0;
    endcase
  end
  reg [15:0] out_0_1_id1;
  wire out_0_1_le;
  assign out_0_1_le = clk_en | (config_ungate[1]); 
  always @(posedge clk) begin
    if (out_0_1_le)
      out_0_1_id1 <= out_0_1_i;
  end
  assign out_0_1 = config_sb[73]?out_0_1_id1:out_0_1_i; 
  reg [15:0] out_0_2_i;
  always @(*) begin
    case (config_sb[5:4])
        2'd0: out_0_2_i = in_1_2;
        2'd1: out_0_2_i = in_2_2;
        2'd2: out_0_2_i = in_3_2;
        2'd3: out_0_2_i = pe_output_0;
        default: out_0_2_i = 0;
    endcase
  end
  reg [15:0] out_0_2_id1;
  wire out_0_2_le;
  assign out_0_2_le = clk_en | (config_ungate[2]); 
  always @(posedge clk) begin
    if (out_0_2_le)
      out_0_2_id1 <= out_0_2_i;
  end
  assign out_0_2 = config_sb[74]?out_0_2_id1:out_0_2_i; 
  reg [15:0] out_0_3_i;
  always @(*) begin
    case (config_sb[7:6])
        2'd0: out_0_3_i = in_1_3;
        2'd1: out_0_3_i = in_2_3;
        2'd2: out_0_3_i = in_3_3;
        2'd3: out_0_3_i = pe_output_0;
        default: out_0_3_i = 0;
    endcase
  end
  reg [15:0] out_0_3_id1;
  wire out_0_3_le;
  assign out_0_3_le = clk_en | (config_ungate[3]); 
  always @(posedge clk) begin
    if (out_0_3_le)
      out_0_3_id1 <= out_0_3_i;
  end
  assign out_0_3 = config_sb[75]?out_0_3_id1:out_0_3_i; 
  reg [15:0] out_0_4_i;
  always @(*) begin
    case (config_sb[9:8])
        2'd0: out_0_4_i = in_1_4;
        2'd1: out_0_4_i = in_2_4;
        2'd2: out_0_4_i = in_3_4;
        2'd3: out_0_4_i = pe_output_0;
        default: out_0_4_i = 0;
    endcase
  end
  reg [15:0] out_0_4_id1;
  wire out_0_4_le;
  assign out_0_4_le = clk_en | (config_ungate[4]); 
  always @(posedge clk) begin
    if (out_0_4_le)
      out_0_4_id1 <= out_0_4_i;
  end
  assign out_0_4 = config_sb[76]?out_0_4_id1:out_0_4_i; 
  reg [15:0] out_0_5_i;
  always @(*) begin
    case (config_sb[11:10])
        2'd0: out_0_5_i = in_1_5;
        2'd1: out_0_5_i = in_2_5;
        2'd2: out_0_5_i = in_3_5;
        2'd3: out_0_5_i = pe_output_0;
        default: out_0_5_i = 0;
    endcase
  end
  reg [15:0] out_0_5_id1;
  wire out_0_5_le;
  assign out_0_5_le = clk_en | (config_ungate[5]); 
  always @(posedge clk) begin
    if (out_0_5_le)
      out_0_5_id1 <= out_0_5_i;
  end
  assign out_0_5 = config_sb[77]?out_0_5_id1:out_0_5_i; 
  reg [15:0] out_0_6_i;
  always @(*) begin
    case (config_sb[13:12])
        2'd0: out_0_6_i = in_1_6;
        2'd1: out_0_6_i = in_2_6;
        2'd2: out_0_6_i = in_3_6;
        2'd3: out_0_6_i = pe_output_0;
        default: out_0_6_i = 0;
    endcase
  end
  reg [15:0] out_0_6_id1;
  wire out_0_6_le;
  assign out_0_6_le = clk_en | (config_ungate[6]); 
  always @(posedge clk) begin
    if (out_0_6_le)
      out_0_6_id1 <= out_0_6_i;
  end
  assign out_0_6 = config_sb[78]?out_0_6_id1:out_0_6_i; 
  reg [15:0] out_0_7_i;
  always @(*) begin
    case (config_sb[15:14])
        2'd0: out_0_7_i = in_1_7;
        2'd1: out_0_7_i = in_2_7;
        2'd2: out_0_7_i = in_3_7;
        2'd3: out_0_7_i = pe_output_0;
        default: out_0_7_i = 0;
    endcase
  end
  reg [15:0] out_0_7_id1;
  wire out_0_7_le;
  assign out_0_7_le = clk_en | (config_ungate[7]); 
  always @(posedge clk) begin
    if (out_0_7_le)
      out_0_7_id1 <= out_0_7_i;
  end
  assign out_0_7 = config_sb[79]?out_0_7_id1:out_0_7_i; 
  reg [15:0] out_0_8_i;
  always @(*) begin
    case (config_sb[17:16])
        2'd0: out_0_8_i = in_1_8;
        2'd1: out_0_8_i = in_2_8;
        2'd2: out_0_8_i = in_3_8;
        2'd3: out_0_8_i = pe_output_0;
        default: out_0_8_i = 0;
    endcase
  end
  reg [15:0] out_0_8_id1;
  wire out_0_8_le;
  assign out_0_8_le = clk_en | (config_ungate[8]); 
  always @(posedge clk) begin
    if (out_0_8_le)
      out_0_8_id1 <= out_0_8_i;
  end
  assign out_0_8 = config_sb[80]?out_0_8_id1:out_0_8_i; 
  reg [15:0] out_1_0_i;
  always @(*) begin
    case (config_sb[19:18])
        2'd0: out_1_0_i = in_0_0;
        2'd1: out_1_0_i = in_2_0;
        2'd2: out_1_0_i = in_3_0;
        2'd3: out_1_0_i = pe_output_0;
        default: out_1_0_i = 0;
    endcase
  end
  reg [15:0] out_1_0_id1;
  wire out_1_0_le;
  assign out_1_0_le = clk_en | (config_ungate[10]); 
  always @(posedge clk) begin
    if (out_1_0_le)
      out_1_0_id1 <= out_1_0_i;
  end
  assign out_1_0 = config_sb[82]?out_1_0_id1:out_1_0_i; 
  reg [15:0] out_1_1_i;
  always @(*) begin
    case (config_sb[21:20])
        2'd0: out_1_1_i = in_0_1;
        2'd1: out_1_1_i = in_2_1;
        2'd2: out_1_1_i = in_3_1;
        2'd3: out_1_1_i = pe_output_0;
        default: out_1_1_i = 0;
    endcase
  end
  reg [15:0] out_1_1_id1;
  wire out_1_1_le;
  assign out_1_1_le = clk_en | (config_ungate[11]); 
  always @(posedge clk) begin
    if (out_1_1_le)
      out_1_1_id1 <= out_1_1_i;
  end
  assign out_1_1 = config_sb[83]?out_1_1_id1:out_1_1_i; 
  reg [15:0] out_1_2_i;
  always @(*) begin
    case (config_sb[23:22])
        2'd0: out_1_2_i = in_0_2;
        2'd1: out_1_2_i = in_2_2;
        2'd2: out_1_2_i = in_3_2;
        2'd3: out_1_2_i = pe_output_0;
        default: out_1_2_i = 0;
    endcase
  end
  reg [15:0] out_1_2_id1;
  wire out_1_2_le;
  assign out_1_2_le = clk_en | (config_ungate[12]); 
  always @(posedge clk) begin
    if (out_1_2_le)
      out_1_2_id1 <= out_1_2_i;
  end
  assign out_1_2 = config_sb[84]?out_1_2_id1:out_1_2_i; 
  reg [15:0] out_1_3_i;
  always @(*) begin
    case (config_sb[25:24])
        2'd0: out_1_3_i = in_0_3;
        2'd1: out_1_3_i = in_2_3;
        2'd2: out_1_3_i = in_3_3;
        2'd3: out_1_3_i = pe_output_0;
        default: out_1_3_i = 0;
    endcase
  end
  reg [15:0] out_1_3_id1;
  wire out_1_3_le;
  assign out_1_3_le = clk_en | (config_ungate[13]); 
  always @(posedge clk) begin
    if (out_1_3_le)
      out_1_3_id1 <= out_1_3_i;
  end
  assign out_1_3 = config_sb[85]?out_1_3_id1:out_1_3_i; 
  reg [15:0] out_1_4_i;
  always @(*) begin
    case (config_sb[27:26])
        2'd0: out_1_4_i = in_0_4;
        2'd1: out_1_4_i = in_2_4;
        2'd2: out_1_4_i = in_3_4;
        2'd3: out_1_4_i = pe_output_0;
        default: out_1_4_i = 0;
    endcase
  end
  reg [15:0] out_1_4_id1;
  wire out_1_4_le;
  assign out_1_4_le = clk_en | (config_ungate[14]); 
  always @(posedge clk) begin
    if (out_1_4_le)
      out_1_4_id1 <= out_1_4_i;
  end
  assign out_1_4 = config_sb[86]?out_1_4_id1:out_1_4_i; 
  reg [15:0] out_1_5_i;
  always @(*) begin
    case (config_sb[29:28])
        2'd0: out_1_5_i = in_0_5;
        2'd1: out_1_5_i = in_2_5;
        2'd2: out_1_5_i = in_3_5;
        2'd3: out_1_5_i = pe_output_0;
        default: out_1_5_i = 0;
    endcase
  end
  reg [15:0] out_1_5_id1;
  wire out_1_5_le;
  assign out_1_5_le = clk_en | (config_ungate[15]); 
  always @(posedge clk) begin
    if (out_1_5_le)
      out_1_5_id1 <= out_1_5_i;
  end
  assign out_1_5 = config_sb[87]?out_1_5_id1:out_1_5_i; 
  reg [15:0] out_1_6_i;
  always @(*) begin
    case (config_sb[31:30])
        2'd0: out_1_6_i = in_0_6;
        2'd1: out_1_6_i = in_2_6;
        2'd2: out_1_6_i = in_3_6;
        2'd3: out_1_6_i = pe_output_0;
        default: out_1_6_i = 0;
    endcase
  end
  reg [15:0] out_1_6_id1;
  wire out_1_6_le;
  assign out_1_6_le = clk_en | (config_ungate[16]); 
  always @(posedge clk) begin
    if (out_1_6_le)
      out_1_6_id1 <= out_1_6_i;
  end
  assign out_1_6 = config_sb[88]?out_1_6_id1:out_1_6_i; 
  reg [15:0] out_1_7_i;
  always @(*) begin
    case (config_sb[33:32])
        2'd0: out_1_7_i = in_0_7;
        2'd1: out_1_7_i = in_2_7;
        2'd2: out_1_7_i = in_3_7;
        2'd3: out_1_7_i = pe_output_0;
        default: out_1_7_i = 0;
    endcase
  end
  reg [15:0] out_1_7_id1;
  wire out_1_7_le;
  assign out_1_7_le = clk_en | (config_ungate[17]); 
  always @(posedge clk) begin
    if (out_1_7_le)
      out_1_7_id1 <= out_1_7_i;
  end
  assign out_1_7 = config_sb[89]?out_1_7_id1:out_1_7_i; 
  reg [15:0] out_1_8_i;
  always @(*) begin
    case (config_sb[35:34])
        2'd0: out_1_8_i = in_0_8;
        2'd1: out_1_8_i = in_2_8;
        2'd2: out_1_8_i = in_3_8;
        2'd3: out_1_8_i = pe_output_0;
        default: out_1_8_i = 0;
    endcase
  end
  reg [15:0] out_1_8_id1;
  wire out_1_8_le;
  assign out_1_8_le = clk_en | (config_ungate[18]); 
  always @(posedge clk) begin
    if (out_1_8_le)
      out_1_8_id1 <= out_1_8_i;
  end
  assign out_1_8 = config_sb[90]?out_1_8_id1:out_1_8_i; 
  reg [15:0] out_2_0_i;
  always @(*) begin
    case (config_sb[37:36])
        2'd0: out_2_0_i = in_0_0;
        2'd1: out_2_0_i = in_1_0;
        2'd2: out_2_0_i = in_3_0;
        2'd3: out_2_0_i = pe_output_0;
        default: out_2_0_i = 0;
    endcase
  end
  reg [15:0] out_2_0_id1;
  wire out_2_0_le;
  assign out_2_0_le = clk_en | (config_ungate[20]); 
  always @(posedge clk) begin
    if (out_2_0_le)
      out_2_0_id1 <= out_2_0_i;
  end
  assign out_2_0 = config_sb[92]?out_2_0_id1:out_2_0_i; 
  reg [15:0] out_2_1_i;
  always @(*) begin
    case (config_sb[39:38])
        2'd0: out_2_1_i = in_0_1;
        2'd1: out_2_1_i = in_1_1;
        2'd2: out_2_1_i = in_3_1;
        2'd3: out_2_1_i = pe_output_0;
        default: out_2_1_i = 0;
    endcase
  end
  reg [15:0] out_2_1_id1;
  wire out_2_1_le;
  assign out_2_1_le = clk_en | (config_ungate[21]); 
  always @(posedge clk) begin
    if (out_2_1_le)
      out_2_1_id1 <= out_2_1_i;
  end
  assign out_2_1 = config_sb[93]?out_2_1_id1:out_2_1_i; 
  reg [15:0] out_2_2_i;
  always @(*) begin
    case (config_sb[41:40])
        2'd0: out_2_2_i = in_0_2;
        2'd1: out_2_2_i = in_1_2;
        2'd2: out_2_2_i = in_3_2;
        2'd3: out_2_2_i = pe_output_0;
        default: out_2_2_i = 0;
    endcase
  end
  reg [15:0] out_2_2_id1;
  wire out_2_2_le;
  assign out_2_2_le = clk_en | (config_ungate[22]); 
  always @(posedge clk) begin
    if (out_2_2_le)
      out_2_2_id1 <= out_2_2_i;
  end
  assign out_2_2 = config_sb[94]?out_2_2_id1:out_2_2_i; 
  reg [15:0] out_2_3_i;
  always @(*) begin
    case (config_sb[43:42])
        2'd0: out_2_3_i = in_0_3;
        2'd1: out_2_3_i = in_1_3;
        2'd2: out_2_3_i = in_3_3;
        2'd3: out_2_3_i = pe_output_0;
        default: out_2_3_i = 0;
    endcase
  end
  reg [15:0] out_2_3_id1;
  wire out_2_3_le;
  assign out_2_3_le = clk_en | (config_ungate[23]); 
  always @(posedge clk) begin
    if (out_2_3_le)
      out_2_3_id1 <= out_2_3_i;
  end
  assign out_2_3 = config_sb[95]?out_2_3_id1:out_2_3_i; 
  reg [15:0] out_2_4_i;
  always @(*) begin
    case (config_sb[45:44])
        2'd0: out_2_4_i = in_0_4;
        2'd1: out_2_4_i = in_1_4;
        2'd2: out_2_4_i = in_3_4;
        2'd3: out_2_4_i = pe_output_0;
        default: out_2_4_i = 0;
    endcase
  end
  reg [15:0] out_2_4_id1;
  wire out_2_4_le;
  assign out_2_4_le = clk_en | (config_ungate[24]); 
  always @(posedge clk) begin
    if (out_2_4_le)
      out_2_4_id1 <= out_2_4_i;
  end
  assign out_2_4 = config_sb[96]?out_2_4_id1:out_2_4_i; 
  reg [15:0] out_2_5_i;
  always @(*) begin
    case (config_sb[47:46])
        2'd0: out_2_5_i = in_0_5;
        2'd1: out_2_5_i = in_1_5;
        2'd2: out_2_5_i = in_3_5;
        2'd3: out_2_5_i = pe_output_0;
        default: out_2_5_i = 0;
    endcase
  end
  reg [15:0] out_2_5_id1;
  wire out_2_5_le;
  assign out_2_5_le = clk_en | (config_ungate[25]); 
  always @(posedge clk) begin
    if (out_2_5_le)
      out_2_5_id1 <= out_2_5_i;
  end
  assign out_2_5 = config_sb[97]?out_2_5_id1:out_2_5_i; 
  reg [15:0] out_2_6_i;
  always @(*) begin
    case (config_sb[49:48])
        2'd0: out_2_6_i = in_0_6;
        2'd1: out_2_6_i = in_1_6;
        2'd2: out_2_6_i = in_3_6;
        2'd3: out_2_6_i = pe_output_0;
        default: out_2_6_i = 0;
    endcase
  end
  reg [15:0] out_2_6_id1;
  wire out_2_6_le;
  assign out_2_6_le = clk_en | (config_ungate[26]); 
  always @(posedge clk) begin
    if (out_2_6_le)
      out_2_6_id1 <= out_2_6_i;
  end
  assign out_2_6 = config_sb[98]?out_2_6_id1:out_2_6_i; 
  reg [15:0] out_2_7_i;
  always @(*) begin
    case (config_sb[51:50])
        2'd0: out_2_7_i = in_0_7;
        2'd1: out_2_7_i = in_1_7;
        2'd2: out_2_7_i = in_3_7;
        2'd3: out_2_7_i = pe_output_0;
        default: out_2_7_i = 0;
    endcase
  end
  reg [15:0] out_2_7_id1;
  wire out_2_7_le;
  assign out_2_7_le = clk_en | (config_ungate[27]); 
  always @(posedge clk) begin
    if (out_2_7_le)
      out_2_7_id1 <= out_2_7_i;
  end
  assign out_2_7 = config_sb[99]?out_2_7_id1:out_2_7_i; 
  reg [15:0] out_2_8_i;
  always @(*) begin
    case (config_sb[53:52])
        2'd0: out_2_8_i = in_0_8;
        2'd1: out_2_8_i = in_1_8;
        2'd2: out_2_8_i = in_3_8;
        2'd3: out_2_8_i = pe_output_0;
        default: out_2_8_i = 0;
    endcase
  end
  reg [15:0] out_2_8_id1;
  wire out_2_8_le;
  assign out_2_8_le = clk_en | (config_ungate[28]); 
  always @(posedge clk) begin
    if (out_2_8_le)
      out_2_8_id1 <= out_2_8_i;
  end
  assign out_2_8 = config_sb[100]?out_2_8_id1:out_2_8_i; 
  reg [15:0] out_3_0_i;
  always @(*) begin
    case (config_sb[55:54])
        2'd0: out_3_0_i = in_0_0;
        2'd1: out_3_0_i = in_1_0;
        2'd2: out_3_0_i = in_2_0;
        2'd3: out_3_0_i = pe_output_0;
        default: out_3_0_i = 0;
    endcase
  end
  reg [15:0] out_3_0_id1;
  wire out_3_0_le;
  assign out_3_0_le = clk_en | (config_ungate[30]); 
  always @(posedge clk) begin
    if (out_3_0_le)
      out_3_0_id1 <= out_3_0_i;
  end
  assign out_3_0 = config_sb[102]?out_3_0_id1:out_3_0_i; 
  reg [15:0] out_3_1_i;
  always @(*) begin
    case (config_sb[57:56])
        2'd0: out_3_1_i = in_0_1;
        2'd1: out_3_1_i = in_1_1;
        2'd2: out_3_1_i = in_2_1;
        2'd3: out_3_1_i = pe_output_0;
        default: out_3_1_i = 0;
    endcase
  end
  reg [15:0] out_3_1_id1;
  wire out_3_1_le;
  assign out_3_1_le = clk_en | (config_ungate[31]); 
  always @(posedge clk) begin
    if (out_3_1_le)
      out_3_1_id1 <= out_3_1_i;
  end
  assign out_3_1 = config_sb[103]?out_3_1_id1:out_3_1_i; 
  reg [15:0] out_3_2_i;
  always @(*) begin
    case (config_sb[59:58])
        2'd0: out_3_2_i = in_0_2;
        2'd1: out_3_2_i = in_1_2;
        2'd2: out_3_2_i = in_2_2;
        2'd3: out_3_2_i = pe_output_0;
        default: out_3_2_i = 0;
    endcase
  end
  reg [15:0] out_3_2_id1;
  wire out_3_2_le;
  assign out_3_2_le = clk_en | (config_ungate[32]); 
  always @(posedge clk) begin
    if (out_3_2_le)
      out_3_2_id1 <= out_3_2_i;
  end
  assign out_3_2 = config_sb[104]?out_3_2_id1:out_3_2_i; 
  reg [15:0] out_3_3_i;
  always @(*) begin
    case (config_sb[61:60])
        2'd0: out_3_3_i = in_0_3;
        2'd1: out_3_3_i = in_1_3;
        2'd2: out_3_3_i = in_2_3;
        2'd3: out_3_3_i = pe_output_0;
        default: out_3_3_i = 0;
    endcase
  end
  reg [15:0] out_3_3_id1;
  wire out_3_3_le;
  assign out_3_3_le = clk_en | (config_ungate[33]); 
  always @(posedge clk) begin
    if (out_3_3_le)
      out_3_3_id1 <= out_3_3_i;
  end
  assign out_3_3 = config_sb[105]?out_3_3_id1:out_3_3_i; 
  reg [15:0] out_3_4_i;
  always @(*) begin
    case (config_sb[63:62])
        2'd0: out_3_4_i = in_0_4;
        2'd1: out_3_4_i = in_1_4;
        2'd2: out_3_4_i = in_2_4;
        2'd3: out_3_4_i = pe_output_0;
        default: out_3_4_i = 0;
    endcase
  end
  reg [15:0] out_3_4_id1;
  wire out_3_4_le;
  assign out_3_4_le = clk_en | (config_ungate[34]); 
  always @(posedge clk) begin
    if (out_3_4_le)
      out_3_4_id1 <= out_3_4_i;
  end
  assign out_3_4 = config_sb[106]?out_3_4_id1:out_3_4_i; 
  reg [15:0] out_3_5_i;
  always @(*) begin
    case (config_sb[65:64])
        2'd0: out_3_5_i = in_0_5;
        2'd1: out_3_5_i = in_1_5;
        2'd2: out_3_5_i = in_2_5;
        2'd3: out_3_5_i = pe_output_0;
        default: out_3_5_i = 0;
    endcase
  end
  reg [15:0] out_3_5_id1;
  wire out_3_5_le;
  assign out_3_5_le = clk_en | (config_ungate[35]); 
  always @(posedge clk) begin
    if (out_3_5_le)
      out_3_5_id1 <= out_3_5_i;
  end
  assign out_3_5 = config_sb[107]?out_3_5_id1:out_3_5_i; 
  reg [15:0] out_3_6_i;
  always @(*) begin
    case (config_sb[67:66])
        2'd0: out_3_6_i = in_0_6;
        2'd1: out_3_6_i = in_1_6;
        2'd2: out_3_6_i = in_2_6;
        2'd3: out_3_6_i = pe_output_0;
        default: out_3_6_i = 0;
    endcase
  end
  reg [15:0] out_3_6_id1;
  wire out_3_6_le;
  assign out_3_6_le = clk_en | (config_ungate[36]); 
  always @(posedge clk) begin
    if (out_3_6_le)
      out_3_6_id1 <= out_3_6_i;
  end
  assign out_3_6 = config_sb[108]?out_3_6_id1:out_3_6_i; 
  reg [15:0] out_3_7_i;
  always @(*) begin
    case (config_sb[69:68])
        2'd0: out_3_7_i = in_0_7;
        2'd1: out_3_7_i = in_1_7;
        2'd2: out_3_7_i = in_2_7;
        2'd3: out_3_7_i = pe_output_0;
        default: out_3_7_i = 0;
    endcase
  end
  reg [15:0] out_3_7_id1;
  wire out_3_7_le;
  assign out_3_7_le = clk_en | (config_ungate[37]); 
  always @(posedge clk) begin
    if (out_3_7_le)
      out_3_7_id1 <= out_3_7_i;
  end
  assign out_3_7 = config_sb[109]?out_3_7_id1:out_3_7_i; 
  reg [15:0] out_3_8_i;
  always @(*) begin
    case (config_sb[71:70])
        2'd0: out_3_8_i = in_0_8;
        2'd1: out_3_8_i = in_1_8;
        2'd2: out_3_8_i = in_2_8;
        2'd3: out_3_8_i = pe_output_0;
        default: out_3_8_i = 0;
    endcase
  end
  reg [15:0] out_3_8_id1;
  wire out_3_8_le;
  assign out_3_8_le = clk_en | (config_ungate[38]); 
  always @(posedge clk) begin
    if (out_3_8_le)
      out_3_8_id1 <= out_3_8_i;
  end
  assign out_3_8 = config_sb[110]?out_3_8_id1:out_3_8_i; 


  always @ (*) begin
    case (config_addr[31:24])    
         8'd0: read_data = config_sb[31:0];
         8'd1: read_data = config_sb[63:32];
         8'd2: read_data = config_sb[95:64];
         8'd3: read_data = config_sb[127:96];
         8'd4: read_data = config_ungate[31:0];
         8'd5: read_data = config_ungate[63:32];
         8'd6 : read_data = out_0_0_id1;
         8'd7 : read_data = out_0_1_id1;
         8'd8 : read_data = out_0_2_id1;
         8'd9 : read_data = out_0_3_id1;
         8'd10 : read_data = out_0_4_id1;
         8'd11 : read_data = out_0_5_id1;
         8'd12 : read_data = out_0_6_id1;
         8'd13 : read_data = out_0_7_id1;
         8'd14 : read_data = out_0_8_id1;
         8'd15 : read_data = out_1_0_id1;
         8'd16 : read_data = out_1_1_id1;
         8'd17 : read_data = out_1_2_id1;
         8'd18 : read_data = out_1_3_id1;
         8'd19 : read_data = out_1_4_id1;
         8'd20 : read_data = out_1_5_id1;
         8'd21 : read_data = out_1_6_id1;
         8'd22 : read_data = out_1_7_id1;
         8'd23 : read_data = out_1_8_id1;
         8'd24 : read_data = out_2_0_id1;
         8'd25 : read_data = out_2_1_id1;
         8'd26 : read_data = out_2_2_id1;
         8'd27 : read_data = out_2_3_id1;
         8'd28 : read_data = out_2_4_id1;
         8'd29 : read_data = out_2_5_id1;
         8'd30 : read_data = out_2_6_id1;
         8'd31 : read_data = out_2_7_id1;
         8'd32 : read_data = out_2_8_id1;
         8'd33 : read_data = out_3_0_id1;
         8'd34 : read_data = out_3_1_id1;
         8'd35 : read_data = out_3_2_id1;
         8'd36 : read_data = out_3_3_id1;
         8'd37 : read_data = out_3_4_id1;
         8'd38 : read_data = out_3_5_id1;
         8'd39 : read_data = out_3_6_id1;
         8'd40 : read_data = out_3_7_id1;
         8'd41 : read_data = out_3_8_id1;
        default : read_data = 'h0;
    endcase
  end
endmodule


